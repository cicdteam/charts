apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hcloud-ccm.fullname" . }}
  labels:
    {{- include "hcloud-ccm.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      {{- include "hcloud-ccm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "hcloud-ccm.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hcloud-ccm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      dnsPolicy: Default
      tolerations:
        # this taint is set by all kubelets running `--cloud-provider=external`
        # so we should tolerate it to schedule the cloud controller manager
        - key: "node.cloudprovider.kubernetes.io/uninitialized"
          value: "true"
          effect: "NoSchedule"
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        # cloud controller manages should be able to run on masters
        - key: "node-role.kubernetes.io/master"
          effect: NoSchedule
        - key: "node-role.kubernetes.io/control-plane"
          effect: NoSchedule
        - key: "node.kubernetes.io/not-ready"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  {{- include "hcloud-ccm.selectorLabels" . | nindent 18 }}

      {{- if .Values.privateNetwork.enabled }}
      hostNetwork: true
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/hcloud-cloud-controller-manager"
            - "--cloud-provider=hcloud"
            - "--leader-elect=false"
            - "--allow-untagged-cloud"
            {{- if .Values.privateNetwork.enabled }}
            - "--allocate-node-cidrs=true"
            - "--cluster-cidr={{ .Values.privateNetwork.clusterCidr }}"
            {{- end }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HCLOUD_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "hcloud-ccm.secretName" . }}
                  key: token
            {{- if .Values.privateNetwork.enabled }}
            - name: HCLOUD_NETWORK
              value: {{ .Values.privateNetwork.id | quote }}
            {{- end }}
            - name: HCLOUD_LOAD_BALANCERS_ENABLED
              value: {{ .Values.loadBalancersEnabled | quote }}
            - name: HCLOUD_DEBUG
              value: {{ .Values.debug | quote }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
